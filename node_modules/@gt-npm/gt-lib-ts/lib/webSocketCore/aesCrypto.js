'use strict';

var CryptoJS = require('crypto-js');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class AESCrypto {
  constructor(secret) {
    this.secret = secret;
    __publicField(this, "key");
    __publicField(this, "iv");
    this.init();
  }
  init(secret) {
    if (secret) {
      this.secret = secret;
    }
    let decodedSecret = atob(this.secret.replace(/-/g, "+").replace(/_/g, "/"));
    const [key, iv] = decodedSecret.split(".");
    this.iv = CryptoJS.enc.Utf8.parse(iv);
    this.key = CryptoJS.enc.Utf8.parse(key);
  }
  encrypt(_data) {
    let data = _data;
    if (typeof data !== "string") {
      data = JSON.stringify(data);
    }
    const cipherText = CryptoJS.AES.encrypt(data, this.key, {
      iv: this.iv,
      mode: CryptoJS.mode.CBC,
      padding: CryptoJS.pad.Pkcs7
    });
    return cipherText.toString();
  }
  decrypt(data) {
    const plaintext = CryptoJS.AES.decrypt(data, this.key, {
      mode: CryptoJS.mode.CBC,
      iv: this.iv,
      padding: CryptoJS.pad.Pkcs7
    });
    return plaintext.toString(CryptoJS.enc.Utf8);
  }
}

exports.AESCrypto = AESCrypto;
//# sourceMappingURL=aesCrypto.js.map
