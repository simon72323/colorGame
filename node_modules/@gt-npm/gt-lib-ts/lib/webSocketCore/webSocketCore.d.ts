import { EventDispatcherCore } from '@gt-npm/gt-lib-ts/es/eventDispatcher';
import { ICrypto } from './aesCrypto';
export interface ProtocolMapItem {
    STRING?: string;
    BINARY?: string;
}
export declare enum WebSocketEvent {
    NET_STATUS = "NET_STATUS",
    NET_RESULT = "NET_RESULT"
}
export interface SetupParam {
    useBinary?: boolean;
    useCrypto?: ICrypto;
    protocolMap?: ProtocolMapItem;
}
export type NetResultResponse = {
    result: any;
};
export type NetStatusResponse = {
    status: string;
    code?: string;
};
export declare class WebSocketCore extends EventDispatcherCore<{
    [WebSocketEvent.NET_RESULT]: NetResultResponse;
    [WebSocketEvent.NET_STATUS]: NetStatusResponse;
}> {
    private ws?;
    protected path: string;
    protected useCrypto?: ICrypto;
    protected useBinary: boolean;
    protected protocolMap?: ProtocolMapItem;
    private ab2str;
    private str2ab;
    private deserialize;
    private serializer;
    private initWebSocket;
    protected wsHandler(event: Event | CloseEvent | MessageEvent): void;
    private wsStatusHandler;
    private wsMessageHandler;
    callServer(data: any): void;
    setupWs({ useBinary, useCrypto, protocolMap }: SetupParam): void;
    connect(path: string): void;
    reconnect(): void;
    close(): void;
}
