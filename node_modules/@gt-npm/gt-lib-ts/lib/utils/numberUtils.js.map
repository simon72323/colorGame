{"version":3,"file":"numberUtils.js","sources":["../../../../packages/utils/numberUtils.ts"],"sourcesContent":["/**\n * 取得指定範圍內的隨機浮點數\n */\nexport function getRandomFloat(start: number, end: number) {\n    return Math.random() * (end - start) + start;\n}\n\n/**\n * 取得指定範圍內的隨機整數(包含start跟end)\n */\nexport function getRandomInt(start: number, end: number) {\n    return Math.floor(Math.random() * (end - start + 1)) + start;\n}\n\n/**\n * getRandomArray 陣列隨機取個數(不重複)\n */\nexport function getRandomArray<T>(array: T[], getCount: number): T[] {\n    let newArr = [];\n\n    for (let i = 0; i < getCount; i++) {\n        // 陣列隨機取一個數\n        const item = array[Math.floor(Math.random() * array.length)];\n        // 找到它的位置\n        const index = array.indexOf(item);\n\n        if (index > -1) {\n            array.splice(index, 1);\n            newArr.push(item);\n        }\n    }\n\n    // 位置排序\n    return newArr.sort((b, a) => {\n        if (typeof a === 'number' && typeof b === 'number') {\n            return b - a;\n        }\n        return 0;\n    });\n}\n\n\n/**\n * 補千位分號 9999.99\n * @param  {Number | string} value 數值\n * @return {String} 9,999.99\n */\nexport function thousandFormat(formatValue: number | string) {\n    const valueStr = `${formatValue}`;\n\n    if (isNaN(+valueStr)) {\n        return valueStr;\n    }\n\n    const arr = valueStr.split('.');\n    const re = /(\\d{1,3})(?=(\\d{3})+$)/g;\n    const num = arr[0].replace(re, '$1,') + (arr.length === 2 ? `.${arr[1]}` : '');\n    return num;\n}\n\n/**\n * 小數補零\n * @param  {String} str  要處理的數字\n * @param  {Number} len  幾位小數\n * @param  {String} type 四捨五入 or 無條件捨去\n * @return {Number}      處理完的數字\n */\nexport function pointFormat(formatValue: string | number, roundCount: number, type: 'round' | 'floor' = 'floor') {\n    const valueStr = `${formatValue}`;\n\n    if (isNaN(+valueStr)) {\n        return valueStr;\n    }\n\n    const slice = valueStr.split('.');\n    if (slice.length === 1) {\n        return `${valueStr}${roundCount ? `.${'0'.repeat(roundCount)}` : ''}`;\n    }\n\n    const decimalLength = slice[1].length;\n    const lengthDiff = roundCount - decimalLength;\n\n    if (!lengthDiff) {\n        return valueStr;\n    }\n    if (lengthDiff > 0) {\n        return `${valueStr}${'0'.repeat(lengthDiff)}`;\n    }\n\n    let floorString = valueStr.slice(0, lengthDiff);\n\n    if (type === 'round') {\n        const checkNum = valueStr.slice(lengthDiff, (lengthDiff + 1) || undefined);\n        floorString = +checkNum >= 5 ? (+`${floorString}51`).toFixed(roundCount) : floorString;\n    }\n\n    return roundCount ? floorString : floorString.replace('.', '');\n}\n\nexport function formatNumber(\n    param: {\n        formatValue: string | number;\n        /** 顯示到小數點後第幾位 */\n        roundCount?: number;\n        /** 設定roundCount的小數點進位方式，default: floor */\n        decimalType?: 'round' | 'floor';\n        /** 是否需要加上千分號 */\n        thousandth?: boolean;\n        /** 設定roundCount時，為0的小數位數是否要保留 true => '100.10', false => '100' */\n        keepDecimal?: boolean;\n        /** 是否需要K符號，超過100000的值才會生效 */\n        isKFormat?: boolean;\n    }\n) {\n    const { formatValue, roundCount, thousandth, keepDecimal, isKFormat, decimalType = 'floor' } = param;\n    const valueNum = +formatValue;\n\n    if (isNaN(valueNum)) return `${formatValue}`;\n\n    let calcValue: string | number = valueNum;\n    let kSymbol = '';\n\n    if (isKFormat && valueNum >= 1e5) {\n        calcValue = accMul(valueNum, 0.001);\n        kSymbol = 'K';\n    }\n\n    if (roundCount !== undefined) {\n        calcValue = pointFormat(calcValue, roundCount, decimalType);\n        calcValue = keepDecimal ? calcValue : +calcValue;\n    }\n\n    const thousandthValue = thousandth ? thousandFormat(calcValue) : `${calcValue}`;\n    return `${thousandthValue}${kSymbol}`;\n}\n\n/**\n * 乘法\n * @param  {Number} arg1 乘數1\n * @param  {Number} arg2 乘數2\n * @return {Number}      乘數1 * 乘數2\n */\nexport function accMul(arg1: number, arg2: number) {\n    const arg1Str = `${arg1}`;\n    const arg2Str = `${arg2}`;\n\n    let pow = 0;\n    pow += arg1Str.split('.')[1]?.length ?? 0;\n    pow += arg2Str.split('.')[1]?.length ?? 0;\n\n    const r1 = +arg1Str.replace('.', '');\n    const r2 = +arg2Str.replace('.', '');\n\n    return r1 * r2 / (10 ** pow);\n}\n\n/**\n * 除法\n * @param  {Number} arg1 被除數\n * @param  {Number} arg2 除數\n * @return {Number}      被除數 / 除數\n */\nexport function accDiv(arg1: number, arg2: number) {\n    const arg1Str = `${arg1}`;\n    const arg2Str = `${arg2}`;\n    const t1 = arg1Str.split('.')[1]?.length ?? 0;\n    const t2 = arg2Str.split('.')[1]?.length ?? 0;\n\n    const r1 = +arg1Str.replace('.', '');\n    const r2 = +arg2Str.replace('.', '');\n\n    return accMul(r1 / r2, +`1e${t2 - t1}`);\n}\n\n/**\n * 加法\n * @param  {Number} arg1 加數1\n * @param  {Number} arg2 加數2\n * @return {Number}      加數1 + 加數2\n */\nexport function accAdd(arg1: number, arg2: number) {\n    let r1 = 0;\n    let r2 = 0;\n    let m;\n\n    try {\n        r1 = arg1.toString().split('.')[1].length;\n    } catch {}\n\n    try {\n        r2 = arg2.toString().split('.')[1].length;\n    } catch {}\n\n    m = Math.pow(10, Math.max(r1, r2));\n\n    return (accMul(arg1, m) + accMul(arg2, m)) / m;\n}\n\n/**\n * 減法\n * @param  {Number} arg1 減數\n * @param  {Number} arg2 被減數\n * @return {Number}      減數 - 被減數\n */\nexport function accSub(arg1: number, arg2: number) {\n    return accAdd(arg1, -arg2);\n}\n"],"names":[],"mappings":"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"}