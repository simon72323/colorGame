export type StopListenerHandle = () => void;
export type DisposeCallback = StopListenerHandle | ((disposeBag?: StopListenerHandle[]) => void);
export type EventCallbackParam = Record<string, any> | undefined;
export type EventCallback<T extends EventCallbackParam = EventCallbackParam> = (param: T) => void | Promise<void>;
export type EventMap = {
    [key: string]: EventCallbackParam;
};
export type ListenerItem = {
    exec: EventCallback;
    once: boolean;
};
export declare function createDisposeBag(): StopListenerHandle[];
/** 觸發並清空所有的dispose */
export declare function clearDisposeBag(disposeBag: StopListenerHandle[]): void;
export declare class EventDispatcherCore<EM extends EventMap = EventMap> {
    private eventStack;
    addEventListener<T extends string>(eventName: T, callback: T extends Extract<keyof EM, string> ? EventCallback<EM[T]> : EventCallback, option?: {
        once?: boolean;
        fixed?: boolean;
    }): DisposeCallback;
    removeEventListener<T extends string>(eventName: T, callback?: T extends Extract<keyof EM, string> ? EventCallback<EM[T]> : EventCallback): void;
    hasEventListener<T extends string>(eventName: T, callback?: T extends Extract<keyof EM, string> ? EventCallback<EM[T]> : EventCallback): boolean;
    dispatchEvent<T extends string>(eventName: T, param: T extends Extract<keyof EM, string> ? EM[T] : EventCallbackParam): Promise<void>;
    dispatchEvent<T extends string>(eventName: T extends Extract<keyof EM, string> ? never : T, param?: EventCallbackParam): Promise<void>;
}
export declare function useGlobalEventDispatcher<EM extends EventMap = EventMap>(): EventDispatcherCore<EM>;
