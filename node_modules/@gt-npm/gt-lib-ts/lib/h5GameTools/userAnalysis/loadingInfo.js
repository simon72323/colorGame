'use strict';

var index = require('../../logger/index.js');
require('../../utils/index.js');
var detectDevice = require('../../utils/detectDevice.js');
var urlHelper = require('../urlHelper.js');
var urlUtils = require('../../utils/urlUtils.js');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var TimeLabelKeys = /* @__PURE__ */ ((TimeLabelKeys2) => {
  TimeLabelKeys2["entrance"] = "entrance";
  TimeLabelKeys2["loader"] = "loader";
  TimeLabelKeys2["ws"] = "ws";
  TimeLabelKeys2["login"] = "login";
  TimeLabelKeys2["takeMachine"] = "takeMachine";
  TimeLabelKeys2["loadInfo"] = "loadInfo";
  TimeLabelKeys2["setupCostumeStart"] = "setupCostumeStart";
  TimeLabelKeys2["setupCostumeEnd"] = "setupCostumeEnd";
  TimeLabelKeys2["machineDetailStart"] = "machineDetailStart";
  TimeLabelKeys2["machineDetailEnd"] = "machineDetailEnd";
  return TimeLabelKeys2;
})(TimeLabelKeys || {});
class LoadingInfo {
  constructor() {
    __publicField(this, "timeLabels", {});
    __publicField(this, "currentLabel", "");
    __publicField(this, "firstTime", 0);
    __publicField(this, "gameType", "");
    __publicField(this, "userID", 0);
  }
  static get shared() {
    var _a, _b;
    if ((_a = window.gtLibTsScope) == null ? void 0 : _a.loadingInfo) {
      return window.gtLibTsScope.loadingInfo;
    }
    return ((_b = window.gtLibTsScope) != null ? _b : window.gtLibTsScope = {}).loadingInfo = new LoadingInfo();
  }
  push(label) {
    if (this.timeLabels[label]) return;
    const self = this;
    const currentItem = {
      label,
      preLabel: void 0,
      time: Date.now(),
      timeDiff: 0,
      diffWith(label2) {
        var _a;
        const targetLabel = self.timeLabels[label2];
        return this.time - ((_a = targetLabel == null ? void 0 : targetLabel.time) != null ? _a : 0);
      }
    };
    const prevItem = this.timeLabels[this.currentLabel];
    if (prevItem) {
      const prevTime = prevItem.time;
      currentItem.timeDiff = currentItem.time - prevTime;
      currentItem.preLabel = prevItem;
    } else {
      this.firstTime = currentItem.time;
    }
    this.currentLabel = label;
    this.timeLabels[label] = currentItem;
  }
  show() {
    var _a;
    let showString = "";
    let currentItem = this.timeLabels[this.currentLabel];
    while (currentItem) {
      const date = new Date(currentItem.time);
      const timeFormat = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}.${date.getUTCMilliseconds()}`;
      showString = `${(_a = currentItem.preLabel) == null ? void 0 : _a.label} => ${currentItem.label}: 
  time: ${timeFormat}
  diff: ${currentItem.timeDiff}
${showString}`;
      currentItem = currentItem.preLabel;
    }
    console.log(showString);
  }
  totalTime() {
    const currentItem = this.timeLabels[this.currentLabel];
    if (!currentItem) return 0;
    return currentItem.time - this.firstTime;
  }
  getTime(label) {
    var _a, _b;
    return (_b = (_a = this.timeLabels[label]) == null ? void 0 : _a.time) != null ? _b : 0;
  }
  sendLoadingTime() {
    var _a, _b, _c, _d, _e, _f;
    if (!this.timeLabels.loader || !this.timeLabels.ws || !this.timeLabels.login || !this.timeLabels.takeMachine || !this.timeLabels.loadInfo || !this.timeLabels.setupCostumeEnd) return;
    const deviceInfo = detectDevice.DetectDevice.getDeviceInfo();
    const portal = (() => {
      const platform = urlUtils.getUrlQuery("platform");
      switch (platform) {
        case "AIO":
          return deviceInfo.mua || "AIO";
        case "app":
          return "APP";
        case "":
          return detectDevice.DetectDevice.isPC ? "PC" : "PHONE";
        default:
          return "\u5176\u4ED6";
      }
    })();
    const clickGame = (_a = parent.playtime) != null ? _a : this.getTime("entrance" /* entrance */);
    const rd1Domain = (_b = parent.memberDomain) != null ? _b : "";
    const cdnDomain = (_c = parent.CDNIP) != null ? _c : location.host;
    const time_getMachineDetail = (_e = (_d = this.timeLabels.machineDetailEnd) == null ? void 0 : _d.diffWith("machineDetailStart" /* machineDetailStart */)) != null ? _e : 0;
    const data = {
      GameType: urlHelper.UrlHelper.shared.gameType,
      HallID: urlHelper.UrlHelper.shared.hallId,
      UserID: this.userID,
      SessionID: urlHelper.UrlHelper.shared.sid,
      Domain: location.host,
      Browser: deviceInfo.pf || "",
      OS: deviceInfo.os || "",
      Portal: portal,
      CDN: cdnDomain,
      MemberDomain: rd1Domain,
      Time_Index: this.getTime("entrance" /* entrance */) - clickGame,
      Time_LoadJS: this.timeLabels.loader.diffWith("entrance" /* entrance */),
      Time_ConnectWebsocket: this.timeLabels.ws.diffWith("loader" /* loader */),
      Time_LoginCheck: this.timeLabels.login.diffWith("ws" /* ws */),
      Time_TakeMachine: this.timeLabels.takeMachine.diffWith("login" /* login */),
      Time_OnLoadInfo2: this.timeLabels.loadInfo.diffWith("takeMachine" /* takeMachine */),
      Time_GetMachineDetail: time_getMachineDetail,
      Time_SetupCostume: this.timeLabels.setupCostumeEnd.diffWith("setupCostumeStart" /* setupCostumeStart */),
      Time_Complete: (() => {
        const endTime = Math.max(this.getTime("setupCostumeEnd" /* setupCostumeEnd */), this.getTime("machineDetailEnd" /* machineDetailEnd */));
        return endTime - this.getTime("loadInfo" /* loadInfo */) - time_getMachineDetail;
      })()
    };
    (_f = window.gtag) == null ? void 0 : _f.call(window, "event", "game_load_time", {
      GameType: data.GameType,
      HallID: data.HallID,
      UserID: data.UserID,
      SessionID: data.SessionID,
      Domain: data.Domain,
      Browser: data.Browser,
      OS: data.OS,
      Portal: data.Portal,
      CDN: data.CDN,
      MemberDomain: data.MemberDomain,
      Time_LoadJS: data.Time_LoadJS,
      Time_ConnectWebsocket: data.Time_ConnectWebsocket,
      Time_LoginCheck: data.Time_LoginCheck,
      Time_TakeMachine: data.Time_TakeMachine,
      Time_OnLoadInfo2: data.Time_OnLoadInfo2,
      Time_GetMachineDetail: data.Time_GetMachineDetail,
      Time_SetupCostume: data.Time_SetupCostume
    });
    const result = {
      Index: data.Time_Index,
      Loader: data.Time_LoadJS,
      WebSocket: data.Time_ConnectWebsocket,
      LoginCheck: data.Time_LoginCheck,
      TakeMachine: data.Time_TakeMachine,
      OnLoadInfo2: data.Time_OnLoadInfo2,
      GetMachineDetail: data.Time_GetMachineDetail,
      Complete: data.Time_Complete
    };
    const sendData = new URLSearchParams();
    Object.entries(result).forEach(([key, value]) => {
      sendData.append(key, `${value}`);
    });
    fetch(
      `${urlHelper.UrlHelper.shared.domain}/ipl/portal.php/game/casinofrontend_entrance/loadingtime`,
      {
        method: "POST",
        headers: {
          "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
        },
        body: sendData
      }
    ).catch(() => {
      index.Logger.warn("\u767C\u9001loadingtime\u5931\u6557");
    });
  }
}

exports.LoadingInfo = LoadingInfo;
exports.TimeLabelKeys = TimeLabelKeys;
//# sourceMappingURL=loadingInfo.js.map
