'use strict';

var index$1 = require('../appTalking/index.js');
var index = require('../logger/index.js');
var detectDevice = require('../utils/detectDevice.js');
var urlUtils = require('../utils/urlUtils.js');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class UrlHelper {
  constructor() {
    __publicField(this, "gameType");
    __publicField(this, "sid");
    __publicField(this, "hallId");
    __publicField(this, "userId");
    __publicField(this, "rawLang");
    __publicField(this, "lang");
    __publicField(this, "rdaLang");
    __publicField(this, "domain", "");
    __publicField(this, "useProxy");
    __publicField(this, "isDemo");
    __publicField(this, "isSDK");
    __publicField(this, "gameCode");
    __publicField(this, "gameKind");
    __publicField(this, "initHistory");
    const _parent = parent;
    this.gameType = urlUtils.getUrlQuery("GameType") || _parent.game_id || "";
    this.sid = urlUtils.getUrlQuery("sid") || _parent.SessionID || "";
    this.hallId = urlUtils.getUrlQuery("HALLID") || _parent.HallID || "";
    this.userId = _parent.UserID || "";
    this.rawLang = urlUtils.getUrlQuery("lang") || _parent.lang || "";
    this.lang = this.identifyLang(this.rawLang, "BB");
    this.rdaLang = this.identifyLang(this.rawLang, "RD");
    this.isDemo = urlUtils.getUrlQuery("demo") === "1" || _parent.Demo;
    this.isSDK = location.protocol == "file:";
    this.isSDK ? this.getDomainInfoSDK() : this.getDomainInfoNormal();
    this.useProxy = urlUtils.getUrlQuery("useProxy") === "true";
    this.gameCode = "1";
    this.gameKind = 5;
    this.initHistory = history.length;
  }
  static get shared() {
    var _a, _b;
    if ((_a = window.gtLibTsScope) == null ? void 0 : _a.urlHelper) {
      return window.gtLibTsScope.urlHelper;
    }
    return ((_b = window.gtLibTsScope) != null ? _b : window.gtLibTsScope = {}).urlHelper = new UrlHelper();
  }
  get isSecure() {
    try {
      const domainUrl = new URL(this.domain);
      return domainUrl.protocol === "https:";
    } catch (e) {
      return false;
    }
  }
  async getDomainInfoSDK() {
    const domain = urlUtils.getUrlQuery("domain");
    if (!domain) throw new Error("UrlHelper.getDomainInfoSDK Error : \u7DB2\u5740\u6C92\u6709domain\u53C3\u6578");
    if (!/^http[s]?:/.test(domain)) throw new Error("UrlHelper.getDomainInfoSDK Error : domain\u53C3\u6578\u9700\u8981\u5305\u542Bhttp or https protocol");
    const parser = new URL(domain);
    this.domain = parser.origin;
  }
  async getDomainInfoNormal() {
    this.domain = location.origin;
  }
  async fetchServerIP() {
    try {
      const domainUrl = new URL(this.domain);
      const url = `${domainUrl.origin}/ipl/app/flash/pig/game/casinoH5/GameAPI/FxDataApi.php?gtype=${this.gameType}&dm=${domainUrl.host}`;
      const data = await (await fetch(url)).json();
      return data.link || "";
    } catch (e) {
      index.Logger.warn(e);
    }
  }
  async checkCdnAlive(cdnProjectRoot, timeout) {
    const controller = new AbortController();
    setTimeout(() => {
      controller.abort();
    }, timeout);
    const cdnSuccess = await fetch(`${cdnProjectRoot}index.html?${Date.now()}`, { signal: controller.signal }).then((response) => response.ok).catch((err) => {
      console.error(err);
      return false;
    });
    return cdnSuccess;
  }
  leaveGame() {
    if (typeof parent.leaveFunction === "function") {
      this.leaveGame = () => {
      };
      parent.leaveFunction();
    } else if (typeof parent.gobacklobby === "function") {
      parent.gobacklobby({ gamekind: this.gameKind });
    } else {
      if (detectDevice.DetectDevice.isMobile) {
        history.go(this.initHistory - history.length - 1);
      } else {
        window.close();
        top == null ? void 0 : top.close();
      }
    }
  }
  identifyLang(lang, type = "BB") {
    const commonLang = {
      ja: "ja",
      vi: "vi",
      th: "th",
      id: "id",
      es: "es"
    };
    const specialLang = {
      BB: {
        tw: "tw",
        cn: "cn",
        kr: "kr",
        en: "us"
      },
      RD: {
        tw: "zh-tw",
        cn: "zh-cn",
        kr: "ko",
        en: "en"
      }
    };
    const finalLang = {
      ...commonLang,
      ...specialLang[type]
    };
    switch (lang) {
      case "zh_tw":
      case "zh-tw":
      case "tw":
        return finalLang.tw;
      case "zh_cn":
      case "zh-cn":
      case "cn":
      case "ug":
        return finalLang.cn;
      case "jp":
      case "ja":
        return finalLang.ja;
      case "vi":
      case "vn":
        return finalLang.vi;
      case "th":
        return finalLang.th;
      case "id":
        return finalLang.id;
      case "es":
        return finalLang.es;
      case "kr":
      case "ko":
        return finalLang.kr;
      case "en":
      default:
        return finalLang.en;
    }
  }
  /**
   * 取得研 A 的 domain，由研 C 的 domain 做轉換
   * @param subDomain 加入自定的子網域
   * @return 研 A 使用的 domain
   */
  getDomainRdA() {
    let subDomain = "www.";
    switch (true) {
      case this.domain.includes("vir888"):
        subDomain = "ts-m.";
        break;
      case this.domain.includes("vir999"):
        subDomain = "www.";
        break;
      case this.domain.includes("04vip"):
        subDomain = "test.";
        break;
      case this.domain.includes("//888."):
        subDomain = "777.";
        break;
    }
    if (/^http[s]?:/.test(this.domain)) {
      return this.domain.replace(/(^http[s]?:\/\/)(.*)/, `$1${subDomain}$2`);
    }
    return this.domain;
  }
  /**
   * 取得下注紀錄網址
   */
  getBetHistoryURL() {
    return `${this.domain}/ipl/portal.php/game/betrecord_search/kind5?GameCode=${this.gameCode}&GameType=${this.gameType}&sid=${this.sid}&lang=${this.rawLang}&rnd=${Date.now()}`;
  }
  /**
   * 取得規則說明網址
   */
  getRulePageURL() {
    return `${this.domain}/ipl/app/help.php?GameType=${this.gameType}&lang=${this.rawLang}&rnd=${Date.now()}`;
  }
  /**
   * 取得Feature版的功能說明
   */
  getHelpURL() {
    return `${this.domain}/ipl/portal.php/game/httpredirect?type=casinoruleinfo&gametype=${this.gameType}&lang=${this.rawLang}`;
  }
  async getCdnUrl() {
    const origin = location.href.split("index")[0];
    const _parent = parent;
    index.Logger.log(`[Origin Root] ${origin}`);
    if (_parent.CDNIP) {
      index.Logger.log(`[CDNIP] ${_parent.CDNIP}`);
      const projectRootPath = location.pathname.split("index.")[0];
      const cdnRootPath = projectRootPath.includes("flash/pig/") ? projectRootPath.replace("ipl/", "") : `app/flash/pig/game/casinoH5${projectRootPath}`;
      const cdnUrl = `${_parent.CDNIP}${cdnRootPath}`;
      if (await this.checkCdnAlive(cdnUrl, 3e3)) {
        return cdnUrl;
      }
    }
    return origin;
  }
  async getWsHost() {
    if (parent.subLink) return parent.subLink;
    const domainUrl = new URL(this.domain);
    if (this.useProxy) return domainUrl.host;
    const serverIP = await this.fetchServerIP();
    if (serverIP) return serverIP;
    if (this.isDemo) return `fxdemo.${domainUrl.host}`;
    return `fx8ec8.${domainUrl.host}`;
  }
  async getWsUrl(wsHost) {
    const linkHost = wsHost != null ? wsHost : await this.getWsHost();
    if (this.isSecure) {
      return `wss://${linkHost}/fxCasino/fxLB?gameType=${this.gameType}`;
    } else {
      return `ws://${linkHost}/fxCasino/fxLB?gameType=${this.gameType}`;
    }
  }
  /**
   * 開啟下注紀錄視窗 (window open)
   */
  gotoBetHistory() {
    window.open(this.getBetHistoryURL(), "_blank");
  }
  /**
   * 開啟規則說明視窗(window open)
   */
  gotoRulePage() {
    window.open(this.getRulePageURL(), "_blank");
  }
  /**
   * 開啟存款頁面
   */
  gotoBankerPage() {
    if (typeof parent.DepositUrl === "function") {
      parent.DepositUrl({
        sid: this.sid,
        lang: this.rdaLang,
        vnd: `${Date.now()}`
      });
    } else {
      const url = `${this.getDomainRdA()}/infe/macenter/common/basicinfocontroller/redirect.json?SESSION_ID=${this.sid}&langx=${this.rdaLang}&&other=deposit&rnd${Date.now()}`;
      window.open(url, "_blank");
    }
  }
  /**
   * 離開遊戲
   * @param error 傳入錯誤的字典檔key值 會針對錯誤訊息判斷對應動作 , 若沒傳入則視為一般的離開遊戲
   */
  exitByError(error) {
    const exitMethod = (() => {
      switch (error) {
        case "NOT_ENOUGH_BALANCE":
        case "MAXIMUN_EXCHANGE":
          return "none";
        case "CHOOSE_MAINTAIN":
        case "SYSTEM_MAINTAIN":
          return "maintain";
        case "SID_IS_NOT_EXIST":
        case "API_EC_INVALID_USER_DATA":
        case "API_EC_ACC_SID_INVALID":
        case "API_EC_USER_DATA_ERROR":
          return "logout";
        case "ACCOUNT_HAS_BEEN_SUSPENDED":
        case "API_EC_ACC_STOP_BETTING":
        case "API_EC_ACC_USER_STOP_BETTING":
        case "API_EC_ACC_USER_ALL_STOP_BETTING":
          return "accountSuspended";
        default:
          return "exit";
      }
    })();
    if (exitMethod !== "none") {
      this.exitGame(exitMethod);
    }
  }
  /**
   * 離開遊戲流程
   */
  exitGame(exitMethod = "exit") {
    index$1.AppTalking.shared.exit(exitMethod);
    this.leaveGame();
  }
}

exports.UrlHelper = UrlHelper;
//# sourceMappingURL=urlHelper.js.map
