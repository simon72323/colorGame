'use strict';

var index = require('../../eventDispatcher/index.js');
var objectUtils = require('../../utils/objectUtils.js');
require('../../utils/reactivity/index.js');
var slotGameConnector = require('../slotGameConnector.js');
var getters = require('./getters.js');
var mutations = require('./mutations.js');
var state = require('./state.js');
var vueReactivity = require('../../utils/reactivity/vue-reactivity.js');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class CommonStore {
  constructor() {
    __publicField(this, "_storeState", state.useStoreState());
    __publicField(this, "storeState", vueReactivity.readonly(this._storeState));
    __publicField(this, "storeMutation", mutations.useMutations(this._storeState));
    __publicField(this, "storeGetter", getters.useGetters(this._storeState));
    __publicField(this, "i18n");
    this.i18n = new Proxy({}, {
      get(_, prop) {
        return CommonStore.shared.storeState.i18n[prop] || prop;
      }
    });
  }
  static get shared() {
    var _a, _b;
    if ((_a = window.gtLibTsScope) == null ? void 0 : _a.commonStore) {
      return window.gtLibTsScope.commonStore;
    }
    return ((_b = window.gtLibTsScope) != null ? _b : window.gtLibTsScope = {}).commonStore = new CommonStore();
  }
  addListeners() {
    [
      [slotGameConnector.SlotGameEvent.READY, this.storeMutation.initState],
      [slotGameConnector.SlotGameEvent.LOGIN, this.storeMutation.onLogin],
      [slotGameConnector.SlotGameEvent.GET_MACHINE_LIST, this.storeMutation.initState],
      [slotGameConnector.SlotGameEvent.TAKE_MACHINE, this.storeMutation.onTakeMachine],
      [slotGameConnector.SlotGameEvent.LOAD_INFO, this.storeMutation.onOnLoadInfo],
      [slotGameConnector.SlotGameEvent.GET_MACHINE_DETAIL, this.storeMutation.onGetMachineDetail],
      [slotGameConnector.SlotGameEvent.CREDIT_EXCHANGE, this.storeMutation.onCreditExchange],
      [slotGameConnector.SlotGameEvent.BALANCE_EXCHANGE, this.storeMutation.onBalanceExchange],
      [slotGameConnector.SlotGameEvent.UPDATE_JP, this.storeMutation.initState],
      [slotGameConnector.SlotGameEvent.UPDATE_MARQUEE, this.storeMutation.initState],
      [slotGameConnector.SlotGameEvent.HIT_JACKPOT, this.storeMutation.onHitJackpot],
      [slotGameConnector.SlotGameEvent.END_GAME, this.storeMutation.onEndGame],
      [slotGameConnector.SlotGameEvent.BEGIN_GAME, this.storeMutation.onBeginGame],
      [slotGameConnector.SlotGameEvent.DOUBLE_GAME, this.storeMutation.onDoubleGame],
      [slotGameConnector.SlotGameEvent.KEEP_MACHINE_STATUS, this.storeMutation.onKeepMachineStatus]
    ].forEach(([eventName, handler]) => {
      index.useGlobalEventDispatcher().addEventListener(eventName, (param) => {
        if (param.event) {
          handler.bind(this.storeMutation)(param.data);
        }
      });
    });
  }
  insertStoreDataPattern(keyWithPattern) {
    return objectUtils.insertVariablePattern(
      this.storeGetter,
      keyWithPattern
    );
  }
  boot() {
    this.addListeners();
  }
}

Object.defineProperty(exports, "StoreState", {
    enumerable: true,
    get: function () { return state.StoreState; }
});
exports.CommonStore = CommonStore;
//# sourceMappingURL=index.js.map
