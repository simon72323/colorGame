import { FinalStoreState } from './state';
export { StoreState } from './state';
export declare class CommonStore {
    static get shared(): CommonStore;
    private _storeState;
    storeState: FinalStoreState;
    storeMutation: {
        setData<T extends keyof import("./state").StoreState>(key: T, value: import("./state").StoreState[T]): void;
        setData<T extends string>(key: T extends keyof import("./state").StoreState ? never : T, value: any): void;
        initState(): void;
        onBeginGame(data: any): void;
        onUpdateJP(data: number | string[]): void;
        onUpdateMarquee(data: string): void;
        onGetMachineList(data: any): void;
        onLogin(data: import("./state").StoreState.LoginData): void;
        onTakeMachine(data: any): void;
        onOnLoadInfo(data: import("./state").StoreState.LoadInfoData): void;
        onGetMachineDetail(data: import("./state").StoreState.MachineDetailData): void;
        onCreditExchange(data: import("./state").StoreState.CreditExchangeData): void;
        onBalanceExchange(data: import("./state").StoreState.BalanceExchangeData): void;
        onHitJackpot(data: import("./state").StoreState.HitJackpotData): void;
        onEndGame(data: {
            Credit: string | number;
        }): void;
        onKeepMachineStatus(data: any): void;
        onDoubleGame(data: any): void;
        setLine(line: number): void;
        setLineBet(lineBet: number): void;
        setMaxBet(): void;
    };
    storeGetter: {
        bet: number;
    };
    i18n: Record<string, string>;
    constructor();
    addListeners(): void;
    insertStoreDataPattern(keyWithPattern: string): string;
    boot(): void;
}
