{"version":3,"file":"index.js","sources":["../../../../../packages/h5GameTools/commonStore/index.ts"],"sourcesContent":["import { useGlobalEventDispatcher } from '@gtLibTs/eventDispatcher';\nimport { insertVariablePattern } from '@gtLibTs/utils/objectUtils';\nimport { readonly } from '@gtLibTs/utils/reactivity';\n\nimport { SlotGameEvent, SlotGameEventMap } from '@gtLibTs/h5GameTools/slotGameConnector';\n\nimport { useGetters } from './getters';\nimport { useMutations } from './mutations';\nimport { useStoreState, FinalStoreState } from './state';\n\nexport { StoreState } from './state';\n\nexport class CommonStore {\n    static get shared() {\n        if (window.gtLibTsScope?.commonStore) {\n            return window.gtLibTsScope.commonStore;\n        }\n        return (window.gtLibTsScope ??= {}).commonStore = new CommonStore();\n    }\n\n    private _storeState = useStoreState();\n\n    public storeState = readonly(this._storeState) as FinalStoreState;\n    public storeMutation = useMutations(this._storeState);\n    public storeGetter = useGetters(this._storeState);\n    public i18n: Record<string, string>;\n\n    constructor() {\n        this.i18n = new Proxy({}, {\n            get(_, prop: string) {\n                return CommonStore.shared.storeState.i18n[prop as string] || prop;\n            }\n        });\n    }\n\n    public addListeners() {\n        ([\n            [SlotGameEvent.READY, this.storeMutation.initState],\n            [SlotGameEvent.LOGIN, this.storeMutation.onLogin],\n            [SlotGameEvent.GET_MACHINE_LIST, this.storeMutation.initState],\n            [SlotGameEvent.TAKE_MACHINE, this.storeMutation.onTakeMachine],\n            [SlotGameEvent.LOAD_INFO, this.storeMutation.onOnLoadInfo],\n            [SlotGameEvent.GET_MACHINE_DETAIL, this.storeMutation.onGetMachineDetail],\n            [SlotGameEvent.CREDIT_EXCHANGE, this.storeMutation.onCreditExchange],\n            [SlotGameEvent.BALANCE_EXCHANGE, this.storeMutation.onBalanceExchange],\n            [SlotGameEvent.UPDATE_JP, this.storeMutation.initState],\n            [SlotGameEvent.UPDATE_MARQUEE, this.storeMutation.initState],\n            [SlotGameEvent.HIT_JACKPOT, this.storeMutation.onHitJackpot],\n            [SlotGameEvent.END_GAME, this.storeMutation.onEndGame],\n            [SlotGameEvent.BEGIN_GAME, this.storeMutation.onBeginGame],\n            [SlotGameEvent.DOUBLE_GAME, this.storeMutation.onDoubleGame],\n            [SlotGameEvent.KEEP_MACHINE_STATUS, this.storeMutation.onKeepMachineStatus]\n        ] as const).forEach(([eventName, handler]) => {\n            useGlobalEventDispatcher<SlotGameEventMap>().addEventListener(eventName, param => {\n                if (param.event) {\n                    handler.bind(this.storeMutation)(param.data);\n                }\n            });\n        });\n    }\n\n    public insertStoreDataPattern(keyWithPattern: string) {\n        return insertVariablePattern(\n            this.storeGetter,\n            keyWithPattern\n        );\n    }\n\n    public boot() {\n        this.addListeners();\n    }\n}"],"names":["useStoreState","readonly","useMutations","useGetters","SlotGameEvent","useGlobalEventDispatcher","insertVariablePattern"],"mappings":"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"}