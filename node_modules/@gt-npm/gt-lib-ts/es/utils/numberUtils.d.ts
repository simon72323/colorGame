/**
 * 取得指定範圍內的隨機浮點數
 */
export declare function getRandomFloat(start: number, end: number): number;
/**
 * 取得指定範圍內的隨機整數(包含start跟end)
 */
export declare function getRandomInt(start: number, end: number): number;
/**
 * getRandomArray 陣列隨機取個數(不重複)
 */
export declare function getRandomArray<T>(array: T[], getCount: number): T[];
/**
 * 補千位分號 9999.99
 * @param  {Number | string} value 數值
 * @return {String} 9,999.99
 */
export declare function thousandFormat(formatValue: number | string): string;
/**
 * 小數補零
 * @param  {String} str  要處理的數字
 * @param  {Number} len  幾位小數
 * @param  {String} type 四捨五入 or 無條件捨去
 * @return {Number}      處理完的數字
 */
export declare function pointFormat(formatValue: string | number, roundCount: number, type?: 'round' | 'floor'): string;
export declare function formatNumber(param: {
    formatValue: string | number;
    /** 顯示到小數點後第幾位 */
    roundCount?: number;
    /** 設定roundCount的小數點進位方式，default: floor */
    decimalType?: 'round' | 'floor';
    /** 是否需要加上千分號 */
    thousandth?: boolean;
    /** 設定roundCount時，為0的小數位數是否要保留 true => '100.10', false => '100' */
    keepDecimal?: boolean;
    /** 是否需要K符號，超過100000的值才會生效 */
    isKFormat?: boolean;
}): string;
/**
 * 乘法
 * @param  {Number} arg1 乘數1
 * @param  {Number} arg2 乘數2
 * @return {Number}      乘數1 * 乘數2
 */
export declare function accMul(arg1: number, arg2: number): number;
/**
 * 除法
 * @param  {Number} arg1 被除數
 * @param  {Number} arg2 除數
 * @return {Number}      被除數 / 除數
 */
export declare function accDiv(arg1: number, arg2: number): number;
/**
 * 加法
 * @param  {Number} arg1 加數1
 * @param  {Number} arg2 加數2
 * @return {Number}      加數1 + 加數2
 */
export declare function accAdd(arg1: number, arg2: number): number;
/**
 * 減法
 * @param  {Number} arg1 減數
 * @param  {Number} arg2 被減數
 * @return {Number}      減數 - 被減數
 */
export declare function accSub(arg1: number, arg2: number): number;
