import { Logger } from '../logger/index.mjs';
import { getUrlQuery } from './urlUtils.mjs';

class DetectDevice {
  static get isMobile() {
    return DetectDevice.iOS || DetectDevice.Android || DetectDevice.isAIO || DetectDevice.BlackBerry || DetectDevice.WindowsPhone || DetectDevice.WindowsTablet || DetectDevice.webOS;
  }
  static get isPC() {
    return !DetectDevice.isMobile && !DetectDevice.isTablet;
  }
  static get desktopOS() {
    const target = navigator.userAgent;
    switch (true) {
      case target.includes("Windows NT 10.0"):
        return "Windows 10";
      case target.includes("Windows NT 6.2"):
        return "Windows 8";
      case target.includes("Windows NT 6.1"):
        return "Windows 7";
      case target.includes("Windows NT 6.0"):
        return "Windows Vista";
      case target.includes("Windows NT 5.1"):
        return "Windows XP";
      case target.includes("Windows NT 5.0"):
        return "Windows 2000";
      case target.includes("Windows NT"):
        return "Windows unknown";
      case target.includes("Mac"):
        return "Mac/iOS";
      case target.includes("X11"):
        return "UNIX";
      case target.includes("Linux"):
        return "Linux";
      default:
        return "";
    }
  }
  /** 個別取用平台判斷 */
  static get iOS() {
    return /iPhone|iPad|iPod/i.test(navigator.userAgent) || DetectDevice.iPadOS;
  }
  static get iPhone4Inch() {
    return /iPhone/i.test(navigator.userAgent) && screen.width < 375;
  }
  static get iPadOS() {
    const ua = window.navigator.userAgent;
    if (ua.includes("iPad")) {
      return true;
    } else if (ua.includes("Macintosh")) {
      if (window.navigator.maxTouchPoints && window.navigator.maxTouchPoints > 2) {
        return true;
      }
    }
    return false;
  }
  static get isTablet() {
    if (DetectDevice.isMobile) {
      if (DetectDevice.iOS) {
        return DetectDevice.iPadOS;
      } else if (DetectDevice.Android) {
        if (/Mobile/i.test(navigator.userAgent) && !/BTV-DL09/i.test(navigator.userAgent)) {
          return false;
        }
        return true;
      } else if (DetectDevice.WindowsTablet) {
        return true;
      }
    }
    return false;
  }
  static get iOSWebView() {
    return DetectDevice.iOS && !/safari/i.test(navigator.userAgent);
  }
  static get AndroidWebView() {
    return DetectDevice.Android && /wv/i.test(navigator.userAgent);
  }
  /** 判斷方式 用url search中有 platform=AIO */
  static get isAIO() {
    return getUrlQuery("platform") === "AIO";
  }
  static get Android() {
    return /Android/i.test(navigator.userAgent);
  }
  static get BlackBerry() {
    return /BlackBerry/i.test(navigator.userAgent);
  }
  static get WindowsPhone() {
    return /Windows Phone/i.test(navigator.userAgent);
  }
  static get WindowsTablet() {
    return /Windows/i.test(navigator.userAgent) && /ARM/i.test(navigator.userAgent);
  }
  static get webOS() {
    return /webOS/i.test(navigator.userAgent);
  }
  //----判別瀏覽器的版本
  static getBrowser() {
    const spaceSp = navigator.userAgent.split(" ");
    let browser = "";
    switch (true) {
      case DetectDevice.isUB:
      case DetectDevice.isOpera:
      case DetectDevice.isSafari:
      case DetectDevice.isFirefox:
      case DetectDevice.isEdge:
      case DetectDevice.isIE:
        browser = spaceSp[spaceSp.length - 1];
        break;
      case DetectDevice.isChrome:
        browser = spaceSp[spaceSp.length - 2];
        break;
      default:
        break;
    }
    if (/Mobile Safari/i.test(navigator.userAgent)) {
      browser = spaceSp[spaceSp.length - 1];
      if (browser.includes("Safari")) {
        browser = spaceSp[spaceSp.length - 4];
      }
      if (browser.includes("Gecko")) {
        browser = spaceSp[spaceSp.length - 3];
      }
    } else if (DetectDevice.Android && !browser) {
      browser = spaceSp[spaceSp.length - 2];
    }
    if (/iOS/i.test(navigator.userAgent)) {
      browser = spaceSp[spaceSp.length - 3];
    }
    return browser.replace(/\//g, " ");
  }
  static getOSAndVersion() {
    const info = navigator.userAgent.split("(")[1].split(")")[0].split(";");
    if (DetectDevice.Android) {
      const androidVersion = info.find((item) => item.includes("Android"));
      return (androidVersion != null ? androidVersion : "").trim();
    } else if (DetectDevice.iOS) {
      const os = info[0];
      let verIndex = 0;
      let version = "";
      info.forEach((item, index) => {
        item.includes("OS") && (verIndex = index);
      });
      const versionPart = info[verIndex].split(" ");
      const osIndex = versionPart.indexOf("OS");
      if (~osIndex) {
        const versionString = navigator.userAgent.includes("Macintosh") ? versionPart[osIndex + 2] : versionPart[osIndex + 1];
        version = versionString.replace(/_/g, ".");
      }
      return `${os} ${version}`;
    } else {
      const desktopOS = DetectDevice.desktopOS;
      return desktopOS === "Mac/iOS" ? info[1].replace(/_/g, ".").trim() : desktopOS;
    }
  }
  /** UB瀏覽器 */
  static get isUB() {
    return navigator.userAgent.includes(" UB");
  }
  /** Opera 8.0+ */
  static get isOpera() {
    var _a;
    return !!((_a = window.opr) == null ? void 0 : _a.addons) || !!window.opera || navigator.userAgent.includes(" OPR/");
  }
  /** Firefox 1.0+ */
  static get isFirefox() {
    return navigator.userAgent.includes("Firefox") || navigator.userAgent.includes("FxiOS");
  }
  /** Safari 3+ */
  static get isSafari() {
    return /safari/i.test(navigator.userAgent) && !/chrome/i.test(navigator.userAgent) && !DetectDevice.isFirefox;
  }
  /** Internet Explorer 6-11 */
  static get isIE() {
    return !!document.documentMode;
  }
  /** Edge 20+ */
  static get isEdge() {
    return navigator.userAgent.includes("Trident") || /Edg(A|iOS|e)?\//.test(navigator.userAgent);
  }
  /** Chrome 1+ */
  static get isChrome() {
    return /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9.]+)(:?\s|$)/.test(navigator.userAgent);
  }
  static getGraphicCardInfo(canvas = document.createElement("canvas")) {
    let graphicCard = "undefined";
    try {
      const webGL = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
      if (webGL) {
        const debugInfo = webGL.getExtension("WEBGL_debug_renderer_info");
        debugInfo && (graphicCard = webGL.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL));
      }
    } catch (e) {
      Logger.error(e);
    }
    return graphicCard;
  }
  /** 取得定義的硬體資訊 */
  static getDeviceInfo(canvas) {
    const spaceSp = navigator.userAgent.split(" ");
    let browser = DetectDevice.getBrowser();
    let webView = "false";
    let srs = `${screen.width}x${screen.height}`;
    let newaio = "";
    let ub = [];
    let encodeIP = "";
    let aio = false;
    let tablet = false;
    let pwa = false;
    if (DetectDevice.isMobile) {
      srs = `${screen.width * devicePixelRatio}x${screen.height * devicePixelRatio}`;
      aio = DetectDevice.isAIO;
      tablet = DetectDevice.isTablet;
      if (DetectDevice.iOS) {
        webView = DetectDevice.iOSWebView ? "is_iOSWebView" : "isnot_iOSWebView";
      } else if (DetectDevice.Android) {
        webView = DetectDevice.AndroidWebView ? "is_AndroidWebView" : "isnot_AndroidWebView";
      }
      if (aio) {
        browser = "";
        const gPortal = spaceSp.find((item) => item.includes("game_portal"));
        const gPlatform = spaceSp.find((item) => item.includes("game_platform"));
        newaio = `${gPlatform} ${gPortal}`;
      }
    }
    spaceSp.forEach((item) => {
      if (DetectDevice.isUB) {
        if (item.includes("Chrome") || item.includes("UB") || item.includes("CustomBrowser")) {
          ub.push(item);
        }
      }
      if (item.includes("HTTP_BB_FORWARDED")) {
        encodeIP = item.split("HTTP_BB_FORWARDED/")[1];
      }
    });
    if (navigator.standalone || window.matchMedia("(display-mode: standalone)").matches) {
      pwa = true;
    }
    const deviceInfo = {
      rd: "fx",
      ua: navigator.userAgent,
      os: DetectDevice.getOSAndVersion(),
      srs,
      wrs: `${window.innerWidth}x${window.innerHeight}`,
      dpr: devicePixelRatio,
      pl: "H5",
      pf: browser,
      wv: webView,
      aio,
      vga: DetectDevice.getGraphicCardInfo(canvas),
      tablet,
      cts: Date.now(),
      mua: getUrlQuery("mua"),
      dtp: getUrlQuery("dtp"),
      newaio,
      ub: ub.join(" "),
      pwa,
      encodeIP: encodeIP || void 0
    };
    return deviceInfo;
  }
}

export { DetectDevice };
//# sourceMappingURL=detectDevice.mjs.map
