{"version":3,"file":"webSocketCore.mjs","sources":["../../../../packages/webSocketCore/webSocketCore.ts"],"sourcesContent":["import { EventDispatcherCore } from '@gtLibTs/eventDispatcher';\nimport  { Logger } from '@gtLibTs/logger';\n\nimport { ICrypto } from './aesCrypto';\n\nexport interface ProtocolMapItem {\n    STRING?: string;\n    BINARY?: string;\n}\n\nexport enum WebSocketEvent {\n    NET_STATUS = 'NET_STATUS',\n    NET_RESULT = 'NET_RESULT'\n}\n\nexport interface SetupParam {\n    useBinary?: boolean;\n    useCrypto?: ICrypto;\n    protocolMap?: ProtocolMapItem;\n}\n\nexport type NetResultResponse = { result: any };\nexport type NetStatusResponse = { status: string; code?: string; };\n\nexport class WebSocketCore extends EventDispatcherCore<{\n    [WebSocketEvent.NET_RESULT]: NetResultResponse;\n    [WebSocketEvent.NET_STATUS]: NetStatusResponse;\n}> {\n    private ws?: WebSocket;\n\n    protected path = '';\n    protected useCrypto?: ICrypto;\n    protected useBinary = false;\n    protected protocolMap?: ProtocolMapItem;\n\n    private ab2str(arraybuffer: ArrayBuffer) {\n        const array = new Uint8Array(arraybuffer);\n        let out = '', i = 0, len = array.length, c: number, char2: number, char3: number;\n\n        while (i < len) {\n            c = array[i++];\n            switch (c >> 4) {\n                case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n                    out += String.fromCharCode(c);\n                    break;\n                case 12: case 13:\n                    char2 = array[i++];\n                    out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n                    break;\n                case 14:\n                    char2 = array[i++];\n                    char3 = array[i++];\n                    out += String.fromCharCode(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F));\n                    break;\n            }\n        }\n        return out;\n    }\n\n    private str2ab(str: string) {\n        const n = str.length;\n        let idx = -1;\n        let byteLength = 512;\n        let bytes = new Uint8Array(byteLength);\n\n        for (let i = 0; i < n; ++i) {\n            const c = str.charCodeAt(i);\n            if (c <= 0x7F) {\n                bytes[++idx] = c;\n            } else if (c <= 0x7FF) {\n                bytes[++idx] = 0xC0 | (c >>> 6);\n                bytes[++idx] = 0x80 | (c & 0x3F);\n            } else if (c <= 0xFFFF) {\n                bytes[++idx] = 0xE0 | (c >>> 12);\n                bytes[++idx] = 0x80 | ((c >>> 6) & 0x3F);\n                bytes[++idx] = 0x80 | (c & 0x3F);\n            } else {\n                bytes[++idx] = 0xF0 | (c >>> 18);\n                bytes[++idx] = 0x80 | ((c >>> 12) & 0x3F);\n                bytes[++idx] = 0x80 | ((c >>> 6) & 0x3F);\n                bytes[++idx] = 0x80 | (c & 0x3F);\n            }\n            if (byteLength - idx <= 4) {\n                const _bytes = bytes;\n                byteLength *= 2;\n                bytes = new Uint8Array(byteLength);\n                bytes.set(_bytes);\n            }\n        }\n        return bytes.subarray(0, ++idx);\n    }\n\n    private deserialize(e: MessageEvent): any | null {\n        const data: string | ArrayBuffer = e.data;\n        const str = data instanceof ArrayBuffer ? this.ab2str(data) : data;\n        const decryptedStr = this.useCrypto?.decrypt(str) ?? str;\n\n        try {\n            return JSON.parse(decryptedStr);\n        } catch (error) {\n            Logger.error('WebSocket deserialize JSON Data Error >>', error);\n            return null;\n        }\n    }\n\n    private serializer(data: any) {\n        const str = typeof data !== 'string' ? JSON.stringify(data) : data;\n        const encryptedStr = this.useCrypto?.encrypt(str) ?? str;\n\n        return this.useBinary ? this.str2ab(encryptedStr) : encryptedStr;\n    }\n\n    private initWebSocket(path: string) {\n        Logger.log(`[WebSocketCore] start connect to ${path} using ${this.useBinary ? 'arraybuffer' : 'string'} protocol`);\n\n        if (this.useBinary) {\n            this.ws = new WebSocket(path, this.protocolMap?.BINARY);\n            this.ws.binaryType = 'arraybuffer';\n        }\n        else {\n            this.ws = new WebSocket(path, this.protocolMap?.STRING);\n        }\n\n        this.ws.onopen = (e: Event) => this.wsHandler(e);\n        this.ws.onclose = (e: CloseEvent) => this.wsHandler(e);\n        this.ws.onmessage = (e: MessageEvent) => this.wsHandler(e);\n        this.ws.onerror = (e: Event) => this.wsHandler(e);\n    }\n\n    protected wsHandler(event: Event | CloseEvent | MessageEvent) {\n        switch (event.type) {\n            case 'open':\n            case 'close':\n            case 'error':\n                this.wsStatusHandler(event);\n                break;\n            case 'message':\n                this.wsMessageHandler(event as MessageEvent);\n                break;\n        }\n    }\n\n    private wsStatusHandler(rawEvent: Event | CloseEvent) {\n        this.dispatchEvent(WebSocketEvent.NET_STATUS, {\n            status: rawEvent.type,\n            code: rawEvent instanceof CloseEvent ? rawEvent.code.toString() : ''\n        });\n    }\n\n    private wsMessageHandler(event: MessageEvent) {\n        const wsResponse = this.deserialize(event);\n\n        this.dispatchEvent(WebSocketEvent.NET_RESULT, { result: wsResponse });\n    }\n\n    public callServer(data: any) {\n        Logger.log('[CallServer]', data);\n\n        const payload = this.serializer(data);\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.ws.send(payload);\n        }\n    }\n\n    public setupWs({\n        useBinary,\n        useCrypto,\n        protocolMap\n    }: SetupParam) {\n        useBinary !== undefined && (this.useBinary = useBinary);\n        useCrypto !== undefined && (this.useCrypto = useCrypto);\n        protocolMap !== undefined && (this.protocolMap = protocolMap);\n    }\n\n    public connect(path: string) {\n        if (!this.ws) {\n            this.path = path;\n            this.initWebSocket(path);\n        }\n    }\n\n    public reconnect() {\n        if (this.ws) {\n            switch (this.ws.readyState) {\n                case WebSocket.OPEN:\n                    this.ws.close();\n                    break;\n                case WebSocket.CLOSED:\n                    this.ws = undefined;\n                    this.connect(this.path);\n                    break;\n            }\n        } else {\n            this.connect(this.path);\n        }\n    }\n\n    public close() {\n        if (this.ws) {\n            this.ws.close();\n            this.ws = undefined;\n        }\n    }\n}"],"names":["WebSocketEvent"],"mappings":"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"}