import { WebSocketCore, SetupParam, NetStatusResponse, NetResultResponse } from '@gt-npm/gt-lib-ts/es/webSocketCore';
export declare enum SlotGameEvent {
    /** 連線中斷 */
    CLOSE = "slotGameEvent_close",
    /** 連線開啟 */
    CONNECTED = "slotGameEvent_connected",
    /** 連線重啟 */
    RECONNECTED = "slotGameEvent_reconnected",
    /** 收到Server Respone Ready事件 */
    READY = "slotGameEvent_ready",
    /** 更新四層彩金資訊 */
    UPDATE_JP = "slotGameEvent_updateJP",
    /** 跑馬燈資訊 */
    UPDATE_MARQUEE = "slotGameEvent_updateMarquee",
    /** 登入結果 */
    LOGIN = "slotGameEvent_onLogin",
    /** 取得機台結果 */
    TAKE_MACHINE = "slotGameEvent_onTakeMachine",
    /**  LoadInfo 結果 */
    LOAD_INFO = "slotGameEvent_onOnLoadInfo2",
    /** 滿台 */
    GET_MACHINE_LIST = "slotGameEvent_onGetMachineList",
    /** 目前機台資訊 */
    GET_MACHINE_DETAIL = "slotGameEvent_onGetMachineDetail",
    /** 換分結果 */
    CREDIT_EXCHANGE = "slotGameEvent_onCreditExchange",
    /** 洗分結果 */
    BALANCE_EXCHANGE = "slotGameEvent_onBalanceExchange",
    /** 中Jackpot */
    HIT_JACKPOT = "slotGameEvent_onHitJackpot",
    /** beginGame結果 */
    BEGIN_GAME = "slotGameEvent_onBeginGame",
    /** doubleGame結果 */
    DOUBLE_GAME = "slotGameEvent_onDoubleGame",
    /** endGame結果 */
    END_GAME = "slotGameEvent_onEndGame",
    /** 中bonusGame */
    HIT_BONUS = "slotGameEvent_onHitBonus",
    /** bonusGame 結束 */
    END_BONUS = "slotGameEvent_onEndBonus",
    /** 保留機台結果 */
    KEEP_MACHINE_STATUS = "slotGameEvent_onKeepMachineStatus",
    /** 離開機台 */
    MACHINE_LEAVE = "slotGameEvent_machineLeave"
}
export interface EventParam {
    eventName: SlotGameEvent;
    event: boolean;
    data?: any;
}
export interface SlotGameSetupParam extends SetupParam {
    useEncryption?: boolean;
}
export type SlotGameCommonEventResponse = {
    data?: any;
    event: boolean;
};
export type SlotGameEventMap = {
    [key: string]: SlotGameCommonEventResponse;
} & {
    [SlotGameEvent.CLOSE]: {
        manual: boolean;
    };
};
export declare class SlotGameConnector {
    static get shared(): SlotGameConnector;
    protected wsCore: WebSocketCore;
    protected closeConnectionByUser: boolean;
    protected useEncryption: boolean;
    constructor();
    protected init(): void;
    protected getEventDispatcher(): import("@gt-npm/gt-lib-ts/es/eventDispatcher").EventDispatcherCore<SlotGameEventMap>;
    protected wsStatusHandler(event: NetStatusResponse): void;
    protected wsResultHandler(event: NetResultResponse): void;
    protected dispatchDisconnectEvent(): void;
    protected dispatchConnectorEvent(eventObject: EventParam): void;
    protected handleConnectorFailEvent(eventObject: EventParam): void;
    protected showAlert(message: string): void;
    connect(wsHost?: string): Promise<void>;
    reconnect(): Promise<void>;
    close(): void;
    setupWs(param: SlotGameSetupParam): void;
    awaitApiResult(eventName: Exclude<SlotGameEvent, SlotGameEvent.CLOSE>): Promise<SlotGameCommonEventResponse>;
    /** 遊戲資訊 */
    callLoadInfo(): Promise<SlotGameCommonEventResponse>;
    /** 登入 */
    callLoginBySid(): Promise<SlotGameCommonEventResponse>;
    callGetMachineDetail(): Promise<SlotGameCommonEventResponse>;
    callLeaveMachine(): Promise<SlotGameCommonEventResponse>;
    callDoubleGame(wagersID: string): Promise<SlotGameCommonEventResponse>;
    callBeginGame(param: {
        line: string;
        lineBet: number;
    }): Promise<SlotGameCommonEventResponse>;
    callBeginGame(param: any): Promise<SlotGameCommonEventResponse>;
    callCreditExchange(rate: string, credit: string): Promise<SlotGameCommonEventResponse>;
    callBalanceExchange(): Promise<SlotGameCommonEventResponse>;
    callKeepMachineStatus(): Promise<SlotGameCommonEventResponse>;
    callEndGame(wagersID: string, creditEnd?: number): Promise<SlotGameCommonEventResponse | undefined>;
    callUpdateUserAnalysis(data: any): void;
    /** 儲存換分記錄 */
    callStoreExREcord(rec: any): void;
}
