{"version":3,"file":"slotGameConnector.mjs","sources":["../../../../packages/h5GameTools/slotGameConnector.ts"],"sourcesContent":["import { useGlobalEventDispatcher } from '@gtLibTs/eventDispatcher';\nimport  { Logger } from '@gtLibTs/logger';\nimport { DetectDevice } from '@gtLibTs/utils/detectDevice';\nimport { WebSocketCore, WebSocketEvent, SetupParam, AESCrypto, NetStatusResponse, NetResultResponse } from '@gtLibTs/webSocketCore';\n\nimport { CommonStore } from '@gtLibTs/h5GameTools/commonStore';\nimport * as gtCommEvents from '@gtLibTs/h5GameTools/gtCommEvents';\nimport { UrlHelper } from '@gtLibTs/h5GameTools/urlHelper';\n\nimport { LoadingInfo, TimeLabelKeys } from '@gtLibTs/h5GameTools/userAnalysis/loadingInfo';\n\n\nexport enum SlotGameEvent {\n    /** 連線中斷 */\n    CLOSE = 'slotGameEvent_close',\n    /** 連線開啟 */\n    CONNECTED = 'slotGameEvent_connected',\n    /** 連線重啟 */\n    RECONNECTED = 'slotGameEvent_reconnected',\n    /** 收到Server Respone Ready事件 */\n    READY = 'slotGameEvent_ready',\n\n    /** 更新四層彩金資訊 */\n    UPDATE_JP = 'slotGameEvent_updateJP',\n    /** 跑馬燈資訊 */\n    UPDATE_MARQUEE = 'slotGameEvent_updateMarquee',\n    /** 登入結果 */\n    LOGIN = 'slotGameEvent_onLogin',\n    /** 取得機台結果 */\n    TAKE_MACHINE = 'slotGameEvent_onTakeMachine',\n    /**  LoadInfo 結果 */\n    LOAD_INFO = 'slotGameEvent_onOnLoadInfo2',\n    /** 滿台 */\n    GET_MACHINE_LIST = 'slotGameEvent_onGetMachineList',\n    /** 目前機台資訊 */\n    GET_MACHINE_DETAIL = 'slotGameEvent_onGetMachineDetail',\n    /** 換分結果 */\n    CREDIT_EXCHANGE = 'slotGameEvent_onCreditExchange',\n    /** 洗分結果 */\n    BALANCE_EXCHANGE = 'slotGameEvent_onBalanceExchange',\n    /** 中Jackpot */\n    HIT_JACKPOT = 'slotGameEvent_onHitJackpot',\n    /** beginGame結果 */\n    BEGIN_GAME = 'slotGameEvent_onBeginGame',\n    /** doubleGame結果 */\n    DOUBLE_GAME = 'slotGameEvent_onDoubleGame',\n    /** endGame結果 */\n    END_GAME = 'slotGameEvent_onEndGame',\n    /** 中bonusGame */\n    HIT_BONUS = 'slotGameEvent_onHitBonus',\n    /** bonusGame 結束 */\n    END_BONUS = 'slotGameEvent_onEndBonus',\n    /** 保留機台結果 */\n    KEEP_MACHINE_STATUS = 'slotGameEvent_onKeepMachineStatus',\n    /** 離開機台 */\n    MACHINE_LEAVE = 'slotGameEvent_machineLeave'\n}\n\nexport interface EventParam {\n    eventName: SlotGameEvent;\n    event: boolean;\n    data?: any;\n}\n\nexport interface SlotGameSetupParam extends SetupParam {\n    useEncryption?: boolean;\n}\n\nexport type SlotGameCommonEventResponse = { data?: any; event: boolean };\nexport type SlotGameEventMap = {\n    [key: string]: SlotGameCommonEventResponse;\n} & {\n    [SlotGameEvent.CLOSE]: { manual: boolean }\n};\n\nexport class SlotGameConnector {\n    static get shared() {\n        if (window.gtLibTsScope?.slotGameConnector) {\n            return window.gtLibTsScope.slotGameConnector;\n        }\n        return (window.gtLibTsScope ??= {}).slotGameConnector = new SlotGameConnector();\n    }\n\n    protected wsCore!: WebSocketCore;\n    protected closeConnectionByUser = false;\n    protected useEncryption = false;\n\n    constructor() {\n        this.init();\n    }\n\n    protected init() {\n        this.wsCore = new WebSocketCore();\n        this.wsCore.setupWs({\n            protocolMap: {\n                BINARY: 'casino.bin',\n                STRING: 'casino.op'\n            }\n        });\n        this.wsCore.addEventListener(WebSocketEvent.NET_STATUS, e => this.wsStatusHandler(e));\n\n        this.getEventDispatcher().addEventListener('updateUserAnalysis', e => {\n            this.callUpdateUserAnalysis(e);\n        });\n    }\n\n    protected getEventDispatcher() {\n        return useGlobalEventDispatcher<SlotGameEventMap>();\n    }\n\n    protected wsStatusHandler(event: NetStatusResponse) {\n        Logger.log(`[NetStatus]::${event.status}`);\n\n        switch (event.status) {\n            case 'open':\n                LoadingInfo.shared.push(TimeLabelKeys.ws);\n                this.getEventDispatcher().dispatchEvent(SlotGameEvent.CONNECTED, {\n                    event: true\n                });\n                this.wsCore.addEventListener(WebSocketEvent.NET_RESULT, e => this.wsResultHandler(e));\n                break;\n\n            case 'error':\n            case 'close':\n                Logger.log('Disconnected, try again.');\n                this.wsCore.removeEventListener(WebSocketEvent.NET_RESULT);\n                this.dispatchDisconnectEvent();\n                break;\n        }\n    }\n\n    protected wsResultHandler(event: NetResultResponse) {\n        const eventResult = event.result;\n\n        if (eventResult?.NetStatusEvent) {\n            Logger.log('[NetStatusEvent]', eventResult);\n            return;\n        }\n\n        if (eventResult?.action) {\n            const eventParam: EventParam = {\n                eventName: `slotGameEvent_${eventResult.action}` as any,\n                event: true\n            };\n\n            if (!eventResult.result) {\n                // 沒有result, 單純action call, 當成成功event直接送出\n                this.dispatchConnectorEvent(eventParam);\n                return;\n            }\n\n            if (eventResult.result.event == null) {\n                // result中沒有event可以判斷是否為成功, 判斷有沒有error or falutCode, 沒有則當成功事件\n                if ((eventResult.result.error != null && eventResult.result.error != '') || eventResult.result.falutCode != null) {\n                    eventParam.event = false;\n                } else {\n                    eventParam.event = true;\n                }\n            } else {\n                eventParam.event = eventResult.result.event;\n            }\n\n            if (eventResult.result.data == null) {\n                // result中沒有用data包裝, 直接將整個result送出\n                eventParam.data = eventResult.result;\n            } else {\n                // result中有用data包裝, 只送出data\n                eventParam.data = eventResult.result.data;\n            }\n            this.dispatchConnectorEvent(eventParam);\n        }\n    }\n\n    protected dispatchDisconnectEvent() {\n        if (this.closeConnectionByUser) {\n            UrlHelper.shared.exitGame();\n            return;\n        }\n        this.showAlert('SYSTEM_BUSY_55670144');\n    }\n\n    protected dispatchConnectorEvent(eventObject: EventParam) {\n        //收到 server method 用 SlotConnectorEvent 往外送\n        //讓Model & View 監聽並實作對應行為\n\n        this.getEventDispatcher().dispatchEvent(eventObject.eventName, {\n            data: eventObject.data,\n            event: eventObject.event\n        });\n\n        if (eventObject.event) {\n            /**\n             * 收到 READY & TAKE_MACHINE\n             * 這兩個事件就直接自動call下一個流程\n             * 外部就不再實作call login & loadInfo的流程了\n             */\n            switch (eventObject.eventName) {\n                case SlotGameEvent.READY:\n                    this.callLoginBySid();\n                    break;\n                case SlotGameEvent.TAKE_MACHINE:\n                    this.callLoadInfo();\n                    break;\n            }\n        } else {\n            this.handleConnectorFailEvent(eventObject);\n        }\n    }\n\n    protected handleConnectorFailEvent(eventObject: EventParam) {\n        Logger.warn(`[SlotConnector] handleConnectorFailEvent [${eventObject.eventName}]`, eventObject.data);\n\n        const errorDictString = eventObject.data?.error || eventObject.data?.errCode || 'SYSTEM_BUSY_55670144';\n        const errorId = eventObject.data?.ErrorID;\n\n        if (errorId) {\n            switch (errorId) {\n                case '5550000141':\n                case '5554000510':\n                case '5554000290':\n                    this.showAlert(`${CommonStore.shared.i18n['DUPLICATE_ERROR']}（${errorDictString}）（${errorId}）`);\n                    break;\n                default:\n                    this.showAlert(errorDictString);\n                    break;\n            }\n        } else {\n            switch (eventObject.eventName) {\n                case SlotGameEvent.LOGIN:\n                    this.showAlert(errorDictString);\n                    break;\n                case SlotGameEvent.TAKE_MACHINE:\n                    this.showAlert(errorDictString);\n                    break;\n                case SlotGameEvent.CREDIT_EXCHANGE:\n                    if (errorDictString !== 'TRANSFER_FAILED') this.callGetMachineDetail();\n                    break;\n                default:\n                    // XC特例, 資料格式不同, 所以額外處理\n                    if (errorDictString === 'ACCUMULATION_NOT_EXIST') {\n                        this.showAlert(`${CommonStore.shared.i18n[errorDictString]}（${eventObject.data?.errCode}）`);\n                    } else {\n                        this.showAlert(errorDictString);\n                    }\n                    break;\n            }\n        }\n    }\n\n    protected showAlert(message: string) {\n        useGlobalEventDispatcher().dispatchEvent(gtCommEvents.Comm.SHOW_ALERT, { message });\n    }\n\n    public connect(wsHost?: string) {\n        return new Promise<void>(async (resolve, reject) => {\n            const wsPath = await UrlHelper.shared.getWsUrl(wsHost);\n            Logger.log(`[SlotGameConnector] >> Start connect to :${wsPath} , sid:${UrlHelper.shared.sid} `);\n\n            if (this.useEncryption) {\n                this.wsCore.setupWs({\n                    useCrypto: new AESCrypto('OTNlODQ0YTkzNGQ3MWU4ODY3Yjg3NWI4NjVkN2U0ODcuODMwMGU1YjQ5MTdjMjhmNw')\n                });\n            }\n            this.wsCore.connect(wsPath);\n            this.getEventDispatcher().addEventListener(SlotGameEvent.CONNECTED, () => resolve(), { once: true });\n            this.getEventDispatcher().addEventListener(SlotGameEvent.CLOSE, () => reject(), { once: true });\n        });\n    }\n\n    public reconnect() {\n        return new Promise<void>(async (resolve, reject) => {\n            this.wsCore.reconnect();\n\n            this.getEventDispatcher().addEventListener(SlotGameEvent.CONNECTED, () => resolve(), { once: true });\n            this.getEventDispatcher().addEventListener(SlotGameEvent.CLOSE, () => reject(), { once: true });\n        });\n    }\n\n    public close() {\n        this.callLeaveMachine();\n        this.closeConnectionByUser = true;\n        this.wsCore.close();\n    }\n\n    public setupWs(param: SlotGameSetupParam) {\n        this.wsCore.setupWs(param);\n        param.useEncryption !== undefined && (this.useEncryption = param.useEncryption);\n    }\n\n    public async awaitApiResult(eventName: Exclude<SlotGameEvent, SlotGameEvent.CLOSE>) {\n        return await new Promise<SlotGameCommonEventResponse>(resolve => {\n            this.getEventDispatcher().addEventListener(eventName, e => {\n                resolve(e);\n            }, { once: true });\n        });\n    }\n\n    /** 遊戲資訊 */\n    public async callLoadInfo() {\n        this.wsCore.callServer({\n            action: 'onLoadInfo2'\n        });\n\n        const result = await this.awaitApiResult(SlotGameEvent.LOAD_INFO);\n        LoadingInfo.shared.push(TimeLabelKeys.loadInfo);\n        return result;\n    }\n\n    /** 登入 */\n    public async callLoginBySid() {\n        const param: any = {\n            action: 'loginBySid',\n            sid: UrlHelper.shared.sid,\n            gtype: UrlHelper.shared.gameType,\n            lang: UrlHelper.shared.lang,\n            dInfo: DetectDevice.getDeviceInfo()\n        };\n\n        // for GCP\n        UrlHelper.shared.hallId && (param.hallID = UrlHelper.shared.hallId);\n        UrlHelper.shared.userId && (param.userID = UrlHelper.shared.userId);\n\n        this.wsCore.callServer(param);\n\n        const result = await this.awaitApiResult(SlotGameEvent.LOGIN);\n        LoadingInfo.shared.push(TimeLabelKeys.login);\n        return result;\n    }\n\n    public async callGetMachineDetail() {\n        LoadingInfo.shared.push(TimeLabelKeys.machineDetailStart);\n        this.wsCore.callServer({\n            action: 'getMachineDetail'\n        });\n\n        const result = await this.awaitApiResult(SlotGameEvent.GET_MACHINE_DETAIL);\n        LoadingInfo.shared.push(TimeLabelKeys.machineDetailEnd);\n        return result;\n    }\n\n    public async callLeaveMachine() {\n        this.wsCore.callServer({\n            action: 'leaveMachine'\n        });\n\n        const result = await this.awaitApiResult(SlotGameEvent.MACHINE_LEAVE);\n        LoadingInfo.shared.push(TimeLabelKeys.takeMachine);\n        return result;\n    }\n\n    public async callDoubleGame(wagersID: string) {\n        this.wsCore.callServer({\n            action: 'doubleGame',\n            sid: UrlHelper.shared.sid,\n            wagersID\n        });\n\n        return this.awaitApiResult(SlotGameEvent.DOUBLE_GAME);\n    }\n\n    public async callBeginGame(param: { line: string, lineBet: number }): Promise<SlotGameCommonEventResponse>;\n    public async callBeginGame(param: any): Promise<SlotGameCommonEventResponse>;\n    public async callBeginGame(param: any) {\n        this.wsCore.callServer({\n            action: 'beginGame4',\n            ...param\n        });\n\n        return this.awaitApiResult(SlotGameEvent.BEGIN_GAME);\n    }\n\n    public async callCreditExchange(rate: string, credit: string) {\n        this.wsCore.callServer({\n            action: 'creditExchange',\n            rate,\n            credit\n        });\n\n        return this.awaitApiResult(SlotGameEvent.CREDIT_EXCHANGE);\n    }\n\n    public async callBalanceExchange() {\n        this.wsCore.callServer({\n            action: 'balanceExchange'\n        });\n\n        return this.awaitApiResult(SlotGameEvent.BALANCE_EXCHANGE);\n    }\n\n    public async callKeepMachineStatus() {\n        this.wsCore.callServer({\n            action: 'keepMachineStatus',\n            sid: UrlHelper.shared.sid\n        });\n\n        return this.awaitApiResult(SlotGameEvent.KEEP_MACHINE_STATUS);\n    }\n\n    public async callEndGame(wagersID: string, creditEnd?: number) {\n        if (creditEnd != null) {\n            this.dispatchConnectorEvent({\n                eventName: SlotGameEvent.END_GAME,\n                event: true,\n                data: { Credit: creditEnd }\n            });\n        } else {\n            this.wsCore.callServer({\n                action: 'endGame',\n                sid: UrlHelper.shared.sid,\n                wagersID\n            });\n\n            return this.awaitApiResult(SlotGameEvent.END_GAME);\n        }\n    }\n\n    public callUpdateUserAnalysis(data: any) {\n        this.wsCore.callServer({\n            action: 'updateUserAnalysis',\n            data\n        });\n    }\n\n    /** 儲存換分記錄 */\n    public callStoreExREcord(rec: any) {\n        this.wsCore.callServer({\n            action: 'saveUserAutoExchange',\n            exchangeRecord: rec\n        });\n    }\n}"],"names":["SlotGameEvent","gtCommEvents.Comm"],"mappings":"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"}