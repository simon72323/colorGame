import { Logger } from '../../logger/index.mjs';

function useMutations(state) {
  class Mutations {
    setData(key, value) {
      state[key] = value;
    }
    initState() {
      state.payoff = 0;
      state.cards = [];
      state.lines = "";
      state.scatter = "";
      state.bonus = "";
      state.free = "";
      state.winJPType = 0;
      state.winJPAmount = 0;
    }
    onBeginGame(data) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;
      Logger.log("[CommonStore::onBegingame]", data);
      state.creditEnd = (_a = data.Credit_End) != null ? _a : state.creditEnd;
      state.freeTimes = parseInt((_b = data.FreeTime) != null ? _b : state.freeTimes);
      state.doubleTime = parseInt((_c = data.DoubleTime) != null ? _c : state.doubleTime);
      state.bet = parseFloat((_d = data.BetTotal) != null ? _d : state.bet);
      state.credit = parseFloat((_e = data.Credit) != null ? _e : state.credit);
      state.levelID = (_f = data.LevelID) != null ? _f : state.levelID;
      state.brickNum = (_g = data.BrickNum) != null ? _g : state.brickNum;
      state.wagersID = (_h = data.WagersID) != null ? _h : state.wagersID;
      state.cards = (_i = data.Cards) != null ? _i : state.cards;
      state.payoff = (_j = data.LinePayoff) != null ? _j : state.payoff;
      state.lines = (_k = data.Lines) != null ? _k : state.lines;
      state.scatter = (_l = data.Scatter) != null ? _l : state.scatter;
      state.bonus = (_m = data.Bonus) != null ? _m : state.bonus;
      state.free = (_n = data.FreeGame) != null ? _n : state.free;
      state.axisLocation = (_o = data.AxisLocation) != null ? _o : state.axisLocation;
      state.encryID = (_p = data.EncryID) != null ? _p : state.wagersID;
    }
    onUpdateJP(data) {
      state.jackpot = data;
    }
    onUpdateMarquee(data) {
      state.marquee = data;
    }
    onGetMachineList(data) {
      Logger.log("[CommonStore::onGetMachineList]", data);
      state.machineList = data;
    }
    onLogin(data) {
      var _a, _b;
      state.userID = (_b = (_a = data.UserID) != null ? _a : data.userID) != null ? _b : state.userID;
    }
    onTakeMachine(data) {
      var _a, _b;
      state.gameCode = (_b = (_a = data == null ? void 0 : data.data) == null ? void 0 : _a.gameCode) != null ? _b : state.gameCode;
    }
    onOnLoadInfo(data) {
      var _a, _b, _c, _d;
      Logger.log("[CommonStore::onOnLoadInfo]", data);
      state.isCash = data.isCash;
      state.loginName = data.LoginName;
      state.userID = (_a = data.UserID) != null ? _a : state.userID;
      state.credit = +data.Credit;
      state.balance = +data.Balance;
      state.base = data.Base;
      state.betBase = data.DefaultBase;
      state.defaultBase = data.DefaultBase;
      if (data.LeftRound) {
        state.brickNum = +data.LeftRound.BrickNum;
        state.levelID = data.LeftRound.LevelID;
      }
      state.betBase = data.BetBase || state.betBase;
      if (data.BetCreditList) {
        state.betCreditList = data.BetCreditList;
        state.bet = state.lineBet = data.DefaultBetCredit;
        state.defaultBetCredit = +data.DefaultBetCredit;
        state.maxLineBet = data.BetCreditList[data.BetCreditList.length - 1];
      }
      state.enableBuyFreeGame = (_b = data.BuyFree) != null ? _b : true;
      if (data.UserName) {
        state.isGCP = true;
        state.loginName = data.UserName;
        state.credit = +data.Balance;
        state.betBase = data.DefaultBase;
        this.initState();
      }
      state.currency = (_c = data.Currency) != null ? _c : state.currency;
      state.noExchange = (_d = data.noExchange) != null ? _d : state.noExchange;
    }
    onGetMachineDetail(data) {
      Logger.log("[CommonStore::onGetMachineDetail]", data);
      state.balance = +data.Balance;
      state.credit = +data.Credit;
      state.betBase = data.BetBase;
      state.base = data.Base;
    }
    onCreditExchange(data) {
      var _a, _b, _c;
      Logger.log("[CommonStore::onCreditExchange]", data);
      state.balance = +((_a = data.Balance) != null ? _a : state.balance);
      state.credit = +((_b = data.Credit) != null ? _b : state.credit);
      state.betBase = (_c = data.BetBase) != null ? _c : state.betBase;
      this.initState();
    }
    onBalanceExchange(data) {
      Logger.log("[CommonStore::onBalanceExchange]", data);
      state.exchangeCredit = +data.TransCredit;
      state.exchangeAmount = +data.Amount;
      state.balance = +data.Balance;
      state.credit = 0;
      state.betBase = "";
      this.initState();
    }
    onHitJackpot(data) {
      Logger.log("[CommonStore::onBalanceExchange]", data);
      state.winJPType = +data.JPType;
      state.winJPAmount = +data.JPAmount;
      this.onBeginGame(data.beginGameResult.data);
    }
    onEndGame(data) {
      Logger.log("[CommonStore::onEndGame]", data);
      state.credit = +data.Credit;
      this.initState();
    }
    onKeepMachineStatus(data) {
      Logger.log("[CommonStore::onKeepMachineStatus]", data);
    }
    onDoubleGame(data) {
      Logger.log("[CommonStore::onDoubleGame]", data);
    }
    /** 設置押線 */
    setLine(line) {
      state.line = line;
    }
    /** 設置線注 */
    setLineBet(lineBet) {
      state.lineBet = lineBet;
    }
    /** 設為最大押注 */
    setMaxBet() {
      state.line = state.maxLine;
      state.lineBet = state.maxLineBet;
    }
  }
  return new Mutations();
}

export { useMutations };
//# sourceMappingURL=mutations.mjs.map
