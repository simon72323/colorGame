import { Logger } from '../logger/index.mjs';
import { DetectDevice } from '../utils/detectDevice.mjs';
import { AppTalkingBase } from './appTalkingBase.mjs';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class AppTalkingAio extends AppTalkingBase {
  constructor() {
    super();
    __publicField(this, "nativeBridge");
    this.nativeBridge = {
      callbacksCount: 1,
      callbacks: {},
      resultForCallback(callbackId, resultArray) {
        var _a;
        try {
          (_a = this.callbacks[callbackId]) == null ? void 0 : _a.apply(null, resultArray);
        } catch (e) {
          alert(e);
        }
      },
      call(functionName, args, callback) {
        var _a;
        let callbackId = 0;
        if (callback) {
          callbackId = this.callbacksCount++;
          this.callbacks[callbackId] = callback;
        }
        let iframe = document.createElement("iframe");
        iframe.setAttribute("src", `js-frame:${functionName}:${callbackId}:${encodeURIComponent(JSON.stringify(args))}`);
        document.documentElement.appendChild(iframe);
        (_a = iframe.parentNode) == null ? void 0 : _a.removeChild(iframe);
        iframe = null;
      }
    };
  }
  iosAppToJsMessage(...args) {
    Logger.log("iosAppToJsMessage", ...args);
  }
  // private androidAppToJsMessage(message: string) {
  //     Logger.log('androidAppToJsMessage', message);
  // }
  iosJsToAppMessage(message) {
    this.nativeBridge.call("JsToAppMessage", [message], this.iosAppToJsMessage);
  }
  androidJsToAppMessage(message) {
    var _a, _b;
    (_b = (_a = window.MyHandler) == null ? void 0 : _a.JsToAppMessage) == null ? void 0 : _b.call(_a, message);
  }
  jsToAppMessage(message) {
    if (DetectDevice.isAIO) {
      if (DetectDevice.iOS) {
        this.iosJsToAppMessage(message);
      } else if (DetectDevice.Android) {
        this.androidJsToAppMessage(message);
      }
    }
  }
  // when game loaded remove exit btn
  onLoaded() {
    this.jsToAppMessage('{ event : "LOADED", "data":"" }');
  }
  leaveGame(logout) {
    if (logout) {
      this.jsToAppMessage('{"event":"SESSION_INVALIDATE", "data":""}');
      return;
    }
    this.jsToAppMessage('{"event":"EXIT", "data":""}');
  }
  open_hall() {
    const url = `${location.protocol.includes("https") ? "https" : "http"}://${location.hostname}`;
    this.jsToAppMessage(`{"event":"NEW_WEBVIEW_ON_TOP","data":"${url}/m/app#pageSport"}`);
  }
  startApp(app) {
    this.jsToAppMessage(`{"event":"START_APP","data":"${app}"}`);
  }
  checkAppStatus(apps) {
    this.jsToAppMessage(`{"event":"CHECK_APP","data":${JSON.stringify(apps)}}`);
  }
  closeWebView() {
    this.jsToAppMessage('{"event":"CLOSE_WEBVIEW_ON_TOP", "data":""}');
  }
  startBrowser(root) {
    const url = `${location.protocol.includes("https") ? "https" : "http"}://${location.hostname}`;
    this.jsToAppMessage(`{"event":"START_BROWSER","data":"${url}${root}"}`);
  }
  closePayOnline() {
    this.jsToAppMessage('{"event":"CLOSE_WINDOW", "data":""}');
  }
  registerSuccess() {
    this.jsToAppMessage('{"event":"REGISTER_SUCCESS", "data":""}');
  }
  accountSuspended() {
    this.jsToAppMessage('{"event":"ACCOUNT_SUSPENDED", "data":""}');
  }
  maintaining() {
    this.jsToAppMessage('{"event":"MAINTAINING", "data":""}');
  }
  notOpen() {
    this.jsToAppMessage('{"event":"NOT_OPEN", "data":""}');
  }
  bound() {
    this.jsToAppMessage('{"event":"BOUND", "data":""}');
  }
  signIn() {
    this.jsToAppMessage('{"event":"SIGNIN", "data":""}');
  }
  showWebGLNoSupport() {
    this.jsToAppMessage('{"event":"EVENT_WEBGL_NOTSUPPORT", "data":""}');
  }
}

export { AppTalkingAio };
//# sourceMappingURL=appTalkingAio.mjs.map
