var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
function createDisposeBag() {
  return [];
}
function clearDisposeBag(disposeBag) {
  var _a;
  while (disposeBag.length) {
    (_a = disposeBag.pop()) == null ? void 0 : _a();
  }
}
class EventDispatcherCore {
  constructor() {
    __publicField(this, "eventStack", {});
  }
  addEventListener(eventName, callback, option) {
    var _a, _b, _c, _d, _e, _f;
    const { once = false, fixed = false } = option != null ? option : {};
    if (!this.hasEventListener(eventName, callback)) {
      (_b = (_a = this.eventStack)[eventName]) != null ? _b : _a[eventName] = [];
      this.eventStack[eventName].push({
        once,
        exec: callback
      });
    }
    const scopeDisposeBag = fixed ? (_d = (_c = window.gtLibTsScope) == null ? void 0 : _c.fixedScope) == null ? void 0 : _d.disposeBag : (_f = (_e = window.gtLibTsScope) == null ? void 0 : _e.globalScope) == null ? void 0 : _f.disposeBag;
    const globalDispose = () => {
      this.removeEventListener(eventName, callback);
    };
    scopeDisposeBag == null ? void 0 : scopeDisposeBag.push(globalDispose);
    return (disposeBag) => {
      if (disposeBag) {
        disposeBag.push(() => {
          this.removeEventListener(eventName, callback);
          const findGlobalIndex = scopeDisposeBag == null ? void 0 : scopeDisposeBag.findIndex(globalDispose);
          if (findGlobalIndex && ~findGlobalIndex) {
            scopeDisposeBag == null ? void 0 : scopeDisposeBag.splice(findGlobalIndex, 1);
          }
        });
      } else {
        this.removeEventListener(eventName, callback);
      }
    };
  }
  removeEventListener(eventName, callback) {
    if (!this.eventStack[eventName]) return;
    if (callback) {
      this.eventStack[eventName] = this.eventStack[eventName].filter((item) => item.exec === callback);
      return;
    }
    this.eventStack[eventName] = [];
  }
  hasEventListener(eventName, callback) {
    if (!this.eventStack[eventName]) return false;
    if (callback) {
      return !!this.eventStack[eventName].find((item) => item.exec === callback);
    }
    return !!this.eventStack[eventName].length;
  }
  async dispatchEvent(eventName, param) {
    if (!this.eventStack[eventName]) return;
    await Promise.all(this.eventStack[eventName].map((item) => item.exec(param)));
    this.eventStack[eventName] = this.eventStack[eventName].filter((item) => !item.once);
  }
}
function useGlobalEventDispatcher() {
  var _a, _b;
  if ((_a = window.gtLibTsScope) == null ? void 0 : _a.eventDispatcher) {
    return window.gtLibTsScope.eventDispatcher;
  }
  return ((_b = window.gtLibTsScope) != null ? _b : window.gtLibTsScope = {}).eventDispatcher = new EventDispatcherCore();
}

export { EventDispatcherCore, clearDisposeBag, createDisposeBag, useGlobalEventDispatcher };
//# sourceMappingURL=index.mjs.map
